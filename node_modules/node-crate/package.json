{
  "_args": [
    [
      {
        "raw": "node-crate@^2.0.3",
        "scope": null,
        "escapedName": "node-crate",
        "name": "node-crate",
        "rawSpec": "^2.0.3",
        "spec": ">=2.0.3 <3.0.0",
        "type": "range"
      },
      "/home/haidee/Documentos/FIWARE/FIWARE-WORK/APIRESTFul/nodejsCrateDB"
    ]
  ],
  "_from": "node-crate@>=2.0.3 <3.0.0",
  "_id": "node-crate@2.0.3",
  "_inCache": true,
  "_location": "/node-crate",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/node-crate-2.0.3.tgz_1507747550958_0.11637633107602596"
  },
  "_npmUser": {
    "name": "igor_lkm",
    "email": "igor.likhomanov@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-crate@^2.0.3",
    "scope": null,
    "escapedName": "node-crate",
    "name": "node-crate",
    "rawSpec": "^2.0.3",
    "spec": ">=2.0.3 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-crate/-/node-crate-2.0.3.tgz",
  "_shasum": "175550089d161436eb56ade701b04d425dc0555a",
  "_shrinkwrap": null,
  "_spec": "node-crate@^2.0.3",
  "_where": "/home/haidee/Documentos/FIWARE/FIWARE-WORK/APIRESTFul/nodejsCrateDB",
  "author": {
    "name": "Stefan Thies"
  },
  "bugs": {
    "url": "https://github.com/megastef/node-crate/issues"
  },
  "contributors": [
    {
      "name": "Igor Likhomanov"
    },
    {
      "name": "Martin Heidegger"
    }
  ],
  "dependencies": {
    "type-of-is": ">= 3.3.x"
  },
  "description": "Node.js SQL-driver for CRATE data store (crate.io)",
  "devDependencies": {
    "expect": "^1.20.2",
    "mocha": "^3.2.0",
    "standard": "^8.6.0"
  },
  "directories": {},
  "dist": {
    "shasum": "175550089d161436eb56ade701b04d425dc0555a",
    "tarball": "https://registry.npmjs.org/node-crate/-/node-crate-2.0.3.tgz"
  },
  "gitHead": "6b32e676551a3d991320c0c6044c8f319d155cf7",
  "homepage": "http://megastef.github.io/node-crate/",
  "keywords": [
    "CRATE",
    "crate.io",
    "sql",
    "driver",
    "bigdata",
    "elasticsearch alternative",
    "driver for scalable data store",
    "BLOB storage"
  ],
  "license": "MIT License",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "igor_lkm",
      "email": "igor.likhomanov@gmail.com"
    },
    {
      "name": "megastef",
      "email": "stefan.thies@sematext.com"
    },
    {
      "name": "leichtgewicht",
      "email": "martin.heidegger@gmail.com"
    }
  ],
  "name": "node-crate",
  "optionalDependencies": {},
  "readme": "node-crate\n==========\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/megastef/node-crate?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![NPM](https://nodei.co/npm/node-crate.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/node-crate/)\n\n\n[![Dependency Status](https://gemnasium.com/megastef/node-crate.png)](https://gemnasium.com/megastef/node-crate)\n&nbsp;[![Standard - JavaScript Style Guide](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n&nbsp;[![bitHound Overall Score](https://www.bithound.io/github/megastef/node-crate/badges/score.svg)](https://www.bithound.io/github/megastef/node-crate)\n&nbsp;[![Build Status](https://travis-ci.org/megastef/node-crate.svg?branch=master)](https://travis-ci.org/megastef/node-crate.svg?branch=master)\n\n\n\nThis is an independent node.js driver implementation for CRATE using the _sql endpoint REST API.\n\n[Crate Data](http://crate.io) \"Easy to scale real time SQL data store\"\n\nPlease note: Crate is a trademark of Crate Technology Gmbh, registered in the E.U. and in other countries.\n\n\n## Features:\n1. Async Interface\n2. Conversion from rows to array of JSON entities\n3. Automatic build of SQL statements from JSON or full control with SQL String with placeholders and arguments\n4. Support for BLOB objects (e.g. for image uploads) with inbuilt key generation\n\n## Known limitation\nNested JSON objects are currently not supported to generate SQL statements (e.g. for insert/update).\nWe might change this soon.\n\n## Breaking changes in version 2 / Migration\n\nNode-crate now using ES6 features and is not compatible anymore with node.js version lower than 6.0.0.\n\nPackage is using native promises, instead of promises implementation by D.js package.\n\nNode-crate version 1.x code:\n```\ncrate.execute(\"select ...\", {}).success(console.log).error(console.error);\n```\n\nShould be updated to node-crate version 2.x:\n```\ncrate.execute(\"select ...\", {}).then((res) => {...})).catch((err) => {...}))\n```\n\n\n## Installation\n\n```\nnpm install node-crate\n```\n\n## Test\nWhen a crate instance is running on http://localhost:4200 you can use [lab](https://github.com/spumko/lab) based test (test/test.js).\nTest actions: create table, insert, select, update, delete and drop table.\n\n```\nnpm test\n```\n\n## Usage\n\n```js\nvar crate = require('node-crate');\ncrate.connect('localhost', 4200);\n// or crate.connect ('http://localhost:4200')\n// to use multiple nodes in round robin crate.connect ('http://host1:4200 http://host2:4200')\n// to use https crate.connect ('https://host1:4200 https://host2:4200')\ncrate.execute(\"select * from tweets where text like ? and retweed=? limit 1\", ['Frohe Ostern%', true]).then((res) => {\n\t// res.json is an array with JSON object, with column names as properties, TIMESTAMP is converted to Date for crate V0.38+\n\t// res.cols are column names\n\t// res.rows values as array of arrays\n\t// res.duration execution time of query\n\t// res.rowcount number of rows\n\t// res.col_types type of column, e.g. res.col_types[i] == crate.type.TIMESTAMP\n\tconsole.log('Success', res.json, res.duration, res.rowcount, res.cols, res.rows)\n})\n\n```\n### execute (sql, args)\n```js\ncrate.execute(\"select * from tweets where text like ?\", ['%crate%']).then((res) => console.log(res))).catch((err) => console.log(err))\n```\n### insert (tableName, jsonEntity)\n```js\ncrate.insert('mytable', {columnName1: 'value1', columnName2: 'value2'}).then((res) => {})\n```\n\n### create (tableName, where)\n```js\nvar scheme = {book: {id: 'integer primary key', title: 'string', author: 'string'}}\ncrate.create(scheme).then(() => {})\n```\n\n### drop (tableName)\n```js\ncrate.drop('mytable').then(() => {})\n```\n\n\n### update (tableName, jsonEntity, whereClause)\n```js\ncrate.update('mytable', {columnName1: 'value1', columnName2: 'value2'}, 'columnName3=5').then(() => {})\n```\n\n\n### delete (tableName, where)\n```js\ncrate.delete('mytable', \"columnName1='value1'\").then(() => {})\n```\n\n## BLOB's\n\n\n### createBlob (tableName, replicas, shards)\n```\ncrate.createBlobTable('images',1,3).then((res) => {}).catch((e) => {})\n```\n### insertBlob (tableName, buffer)\n```js\ncrate.insertBlob('images', buffer).then((res) => {});\n```\n### insertBlobFile (tableName, fileName)\nThe callback returns the required haskey to get the image with getBlob.\n\n```js\ncrate.insertBlobFile ('images', './test.png').then((hashKey) => {\n    console.log (\"Assigned hashkey\": hashKey)\n})\n```\n### getBlob (tableName, hashKey)\nThe callback return a buffer as result - callback (buffer)\n```js\ncrate.getBlob ('f683e0c9abcbf518704af66c6195bfd3ff121f09').then((data) => {\n  \tfs.writeFileSync ('test.gif', data)\n});\n```\n\n# Use in Webbrowsers JavaScript\n\nThe intention was to use it with node.js on the server side, but it is possible to make it available in a web browser using [browserify](https://github.com/substack/node-browserify).\n```\nnpm run bundle\n```\n\nThe resulting automatically generated using drone.io. You can refer to this file:\n\n```\n<script src=\"https://drone.io/github.com/megastef/node-crate/files/bundle.js\"></script>\n```\n\nThen you might be able to use it inside of an CRATE-Plug-In HTML page:\n\n```\n<script src=\"bundle.js\"></script>\n<script>\n  var crate = require('node-crate');\n  crate.execute ('select * from tweets limit 10').then(window.alert)\n</script>\n```\n\n## License\n\nThe MIT License(MIT)\nCopyright(C) 2014 by Stefan Thies, Igor Likhomanov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files(the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and / or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/megastef/node-crate.git"
  },
  "scripts": {
    "bundle": "browserify -r ./lib/index.js:node-crate > bundle.js",
    "test": "standard --format lib/*.js && mocha -t 20000"
  },
  "version": "2.0.3"
}
